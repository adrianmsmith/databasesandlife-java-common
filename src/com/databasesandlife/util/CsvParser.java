package com.databasesandlife.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import com.google.gdata.util.io.base.UnicodeReader;

/**
 * Parses CSV files.
 *
 * <p>The CSV file is assumed to have a first line containing the column headings.
 * Does not handle quotes in fields (e.g. as generated by Excel).
 * Field names are case-sensitive.
 * Files have a default character set (by default UTF-8) which can be changed by calling {@link #setDefaultCharset},
 * however if the file has a Unicode BOM then this is accepted in preference to the default charset.
 *
 * <h3>Usage</h3>
 * <p>Create an object and set attributes such as the field-separator, list of acceptable columns, etc.
 * Then either call parseAndCallHandler or parseToListOfMaps.</p>
 * 
 * <pre>
 *    CsvLineHandler myHandler = new CsvLineHandler() {
 *        void processCsvLine(Map&lt;String,String> line) { .. }
 *    };
 *    CsvParser csvParser = new CsvParser();
 *    csvParser.setDesiredFields("abc","def"); // field set in file must be this set
 *    csvParser.setNonEmptyFields("abc");      // all of these fields must have non-empty values
 *    csvParser.parseAndCallHandler(myHandler, aFile);
 *    csvParser.parseAndCallHandler(myHandler, aReader);
 *    csvParser.parseAndCallHandler(myHandler, aClass);  // reads "aClass.csv" from classloader
 *    List&lt;Map&lt;String,String>> contents = csvParser.parseToListOfMaps(aFile);</pre>
 * <h3>Glossary</h3>
 * <ul>
 * <li><b>Field</b> - name of column
 * <li><b>Column index</b> - e.g. 0 is the left-most column
 * <li><b>Line</b> - a row of data or header
 * </ul>
 *
 * @author This source is copyright <a href="http://www.databasesandlife.com">Adrian Smith</a> and licensed under the LGPL 3.
 * @version $Revision$
 */
public class CsvParser {

    public interface CsvLineHandler {
        void processCsvLine(Map<String, String> line);
    }

    public class MalformedCsvException extends Exception {  // checked ex. because it's always possible CSV invalid, must handle it
        public MalformedCsvException(String msg) { super(msg); }
    }

    protected class ArrayOfMapsLineHandler implements CsvLineHandler {
        List<Map<String,String>> result = new ArrayList<Map<String,String>>();
        public void processCsvLine(Map<String, String> line) { result.add(line); }
    }

    protected Charset defaultCharset = Charset.forName("UTF-8");
    protected Pattern fieldSeparatorRegexp = Pattern.compile(Pattern.quote(","));
    protected String[] desiredFields = null;
    protected String[] nonEmptyFields = null;
    protected Pattern endOfLineRegex = Pattern.compile("^$");

    public void setEndOfLineRegex(Pattern p){ this.endOfLineRegex = p;}
    
    public void setDefaultCharset(Charset c) { defaultCharset = c; }
    public void setFieldSeparatorRegexp(Pattern p) { fieldSeparatorRegexp = p; }
    
    /** Any fields found outside of this list cause an error */ 
    public void setDesiredFields(String... f) { desiredFields = f; }
    
    /** Any fields here must be present and have non-empty values */ 
    public void setNonEmptyFields(String... f) { nonEmptyFields = f; }

    public void parseAndCallHandler(CsvLineHandler lineHandler, BufferedReader r) throws MalformedCsvException {
        try {
            String headerLine = r.readLine();
            if (headerLine == null) throw new MalformedCsvException("File was empty (header line is mandatory)");
            String[] fieldForColIdx = fieldSeparatorRegexp.split(headerLine);
            if (desiredFields != null) {
                for (String desiredField : desiredFields)
                    if ( ! Arrays.asList(fieldForColIdx).contains(desiredField))
                        throw new MalformedCsvException("Column '" + desiredField + "' is missing");
                for (String foundField : fieldForColIdx)
                    if ( ! Arrays.asList(desiredFields).contains(foundField))
                        throw new MalformedCsvException("Column '" + foundField + "' unexpected");
            }

            int lineNumber = 2;
            while (true) {
                try {
                    String line = r.readLine();
                    if (line == null || endOfLineRegex.matcher(line).matches()) break; // end of file
                    String[] valueForColIdx = fieldSeparatorRegexp.split(line,-1);
                    if (valueForColIdx.length == 0) continue; // ignore blank lines e.g. at end of file
                    if (valueForColIdx.length != fieldForColIdx.length) throw new MalformedCsvException("Expected " +
                        fieldForColIdx.length + " fields but found " + valueForColIdx.length + " fields");
                    Map<String, String> valueForField = new HashMap<String, String>();
                    for (int c = 0; c < valueForColIdx.length; c++) {
                        String field = fieldForColIdx[c];
                        String val = valueForColIdx[c];
                        if (nonEmptyFields != null && Arrays.asList(nonEmptyFields).contains(field))
                            if (val.length() == 0) throw new MalformedCsvException("Column " + c + ", field '" + field + "': value may not be empty");
                        valueForField.put(field, val);
                    }
                    lineHandler.processCsvLine(valueForField);

                    lineNumber++;
                }
                catch (MalformedCsvException e) { throw new MalformedCsvException("Line " + lineNumber + ": " + e.getMessage()); }
            }
        }
        catch (IOException e) { throw new RuntimeException(e); }
    }

    public void parseAndCallHandler(CsvLineHandler lineHandler, File f) throws MalformedCsvException {
        try {
            FileInputStream is = new FileInputStream(f);
            try {
                Reader r = new UnicodeReader(is, defaultCharset.name());
                BufferedReader br = new BufferedReader(r);
                parseAndCallHandler(lineHandler, br);
            }
            finally { is.close(); }
        }
        catch (FileNotFoundException e) { throw new MalformedCsvException("CSV file '"+f+"' doesn't exist"); }
        catch (IOException e) { throw new RuntimeException("CSV file '" + f + "': " + e.getMessage(), e); }
        catch (MalformedCsvException e) { throw new MalformedCsvException("CSV file '" + f + "': " + e.getMessage()); }
    }
    
    public void parseAndCallHandler(CsvLineHandler lineHandler, Class<?> cl) throws MalformedCsvException {
        try {
            String name = cl.getName().replaceAll("\\.", "/"); // e.g. "com/offerready/MyClass"
            InputStream csvStream = cl.getClassLoader().getResourceAsStream(name + ".csv");
            if (csvStream == null) throw new IllegalArgumentException("No CSV file for class '" + cl.getName() + "'");
            try { parseAndCallHandler(lineHandler, new BufferedReader(new InputStreamReader(csvStream, defaultCharset))); }
            finally { csvStream.close(); }
        }
        catch (IOException e) { throw new RuntimeException(e); }
    }

    public List<Map<String, String>> parseToListOfMaps(BufferedReader r) throws MalformedCsvException {
        ArrayOfMapsLineHandler lineHandler = new ArrayOfMapsLineHandler();
        parseAndCallHandler(lineHandler, r);
        return lineHandler.result;
    }

    public List<Map<String, String>> parseToListOfMaps(File f) throws MalformedCsvException {
        ArrayOfMapsLineHandler lineHandler = new ArrayOfMapsLineHandler();
        parseAndCallHandler(lineHandler, f);
        return lineHandler.result;
    }

    public List<Map<String, String>> parseToListOfMaps(Class<?> cl) throws MalformedCsvException {
        ArrayOfMapsLineHandler lineHandler = new ArrayOfMapsLineHandler();
        parseAndCallHandler(lineHandler, cl);
        return lineHandler.result;
    }
}
